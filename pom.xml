<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>jGeohash</groupId>
	<artifactId>jgeohash</artifactId>
	<inceptionYear>2010</inceptionYear>
	<version>1.4.3</version>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
		<maven-compiler-plugin.source.version>1.6</maven-compiler-plugin.source.version>
		<maven-compiler-plugin.target.version>1.6</maven-compiler-plugin.target.version>
		<maven-compiler-plugin.encoding>UTF-8</maven-compiler-plugin.encoding>
		<maven-compiler-plugin.optimize>true</maven-compiler-plugin.optimize>
		<maven-compiler-plugin.debug>true</maven-compiler-plugin.debug>	
		<maven-source-plugin.version>2.2.1</maven-source-plugin.version>
		<maven-eclipse-plugin.version>2.9</maven-eclipse-plugin.version>
		<license-maven-plugin.version>2.5</license-maven-plugin.version>	
		<github.global.server>github</github.global.server>
		<testng.version>6.8.7</testng.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>${testng.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>

		</resources>

		<testResources>

			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>

		</testResources>

		<plugins>

			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${maven-compiler-plugin.source.version}</source>
					<target>${maven-compiler-plugin.target.version}</target>
					<encoding>${maven-compiler-plugin.encoding}</encoding>
					<optimize>${maven-compiler-plugin.optimize}</optimize>
					<debug>${maven-compiler-plugin.debug}</debug>
				</configuration>
			</plugin>

			<!-- Configuring Maven Source Plugin: To attach source artifacts to your 
				build we execute the source:jar goal from the source plugin during the package 
				phase. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin.version}</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${maven-eclipse-plugin.version}</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<additionalBuildcommands>
						<buildcommand>org.eclipse.m2e.core.maven2Builder</buildcommand>
					</additionalBuildcommands>
					<additionalProjectnatures>
						<projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
					</additionalProjectnatures>
					<downloadSources>true</downloadSources>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<distributionManagement>

		<repository>
			<id>internal.repo</id>
			<name>Temporary Staging Repository</name>
			<url>file://${project.build.directory}/mvn-repo</url>
		</repository>

	</distributionManagement>

	<profiles>

		<profile>
			<id>deploy-on-github</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- Configuring Maven Source Plugin: To attach source artifacts to 
						your build we execute the source:jar goal from the source plugin during the 
						package phase. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>com.github.github</groupId>
						<artifactId>site-maven-plugin</artifactId>
						<version>0.7</version>
						<configuration>
							<message>Maven artifacts for ${project.version}</message>
							<!-- git commit message -->
							<noJekyll>true</noJekyll>
							<!-- disable webpage processing -->
							<merge>true</merge>
							<outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
							<!-- matches distribution management repository url above -->
							<branch>refs/heads/mvn-repo</branch>
							<!-- remote branch name -->
							<includes>
								<include>**/*</include>
							</includes>
							<repositoryName>jgeohash</repositoryName>
							<!-- github repo name -->
							<repositoryOwner>astrapi69</repositoryOwner>
							<!-- github username -->
						</configuration>
						<executions>
							<!-- run site-maven-plugin's 'site' target as part of the build's 
								normal 'deploy' phase -->
							<execution>
								<goals>
									<goal>site</goal>
								</goals>
								<phase>deploy</phase>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.eclipse.mylyn.github</groupId>
								<artifactId>org.eclipse.egit.github.core</artifactId>
								<version>2.0.3</version>
							</dependency>
						</dependencies>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>release-javadoc-jar-with-dependencies</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- Configuring Maven Javadoc Plugin: To attach javadoc artifacts to 
						your build we execute the javadoc:jar goal from the javadoc plugin. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<!-- NOTE: We don't need a groupId specification because the group 
							is org.apache.maven.plugins ...which is assumed by default. -->
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<!-- this is used for inheritance merges -->
								<phase>package</phase>
								<!-- append to the packaging phase. -->
								<goals>
									<goal>attached</goal>
									<!-- goals == mojos -->
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
		
		<profile>
		<!-- This profile is for generate or update the license header from source files.
			 for generate or update the license header you have to run this profile with this
			 goal license:format. -->
			<id>update-license-header</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
				
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>${license-maven-plugin.version}</version>
						<configuration>
							<header>src/main/resources/LICENSE.txt</header>
							<properties>
								<owner>Asterios Raptis</owner>
								<year>${project.inceptionYear}</year>
								<email>asterios.raptis@gmx.net</email>
							</properties>
							<excludes>
								<exclude>**/README</exclude>
								<exclude>**/pom.xml</exclude>
								<exclude>src/test/resources/**</exclude>
								<exclude>src/main/resources/**</exclude>
							</excludes>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>format</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				
				</plugins>
			</build>

		</profile>

	</profiles>

</project>